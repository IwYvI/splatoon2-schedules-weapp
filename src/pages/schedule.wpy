<template>
  <view class="container schedule-container">
    <view class="schedule-wrap card-wrap stripe-background {{mode}}">
      <view class="schedule-title card-title">
        <view>
          <image class="schedule-logo" mode="widthFix" src="{{logoImageSrc}}"></image>
          <text class="splatoon2">{{titleText}}</text>
        </view>
        <icon class="schedule-close-icon" @tap="backToIndex" type="clear" size="24" color="#ffffff" />
      </view>
      <view class="schedule-lists">
        <view class="schedule-list" wx:for="{{list}}" wx:key="end_time">
          <view class="schedule-list-title">
            <text class="schedule-list-title-mode splatoon2">{{item.rule.name}}</text>
            <text class="splatoon2">{{timeWxs.generateScheduleTimeString(item.start_time, item.end_time)}}</text>
          </view>
          <view class="schedule-list-images">
            <view>
              <image mode="widthFix" src="{{imageWxs.getImageUrl(item.stage_a.image)}}"></image>
              <text class="splatoon2">{{item.stage_a.name}}</text>
            </view>
            <view>
              <image mode="widthFix" src="{{imageWxs.getImageUrl(item.stage_b.image)}}"></image>
              <text class="splatoon2">{{item.stage_b.name}}</text>
            </view>
          </view>
        </view>
      </view>
    </view>
  </view>
</template>
<style lang="less">
.schedule-container {
  margin-top: 10px;
  margin-bottom: 10px;
}
.schedule-wrap {
  color: white;
}

.schedule-title {
  justify-content: space-between;
  margin-top: 15px;
  margin-bottom: 25px;
  view {
    display: flex;
    align-items: center;
    .schedule-logo {
      width: 40px;
      height: 0;
    }
    text {
      font-size: 48rpx;
      margin-left: 10px;
      line-height: 1em;
    }
  }
  .schedule-close-icon {
    display: block;
    border-radius: 50%;
    box-shadow: 1px 1px 0 rgba(0, 0, 0, .5);
  }
}
.schedule-list {
  font-size: 24rpx;
  margin-bottom: 15px;
  .schedule-list-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 5px;
    margin-bottom: 10px;
    padding: 0 5px;
    text {
      line-height: 1em;
      color: #eeeeee;
      font-size: 1.2em;
    }
    .schedule-list-title-mode {
      color: #ffffff;
      font-size: 1.4em;
    }
  }
  .schedule-list-images {
    display: flex;
    & > view {
      width: 50%;
      position: relative;
      padding: 0 5px;
      image {
        width: 100%;
        height: 0;
        border-radius: 15px;
      }
      text {
        position: absolute;
        font-size: 1em;
        bottom: 8px;
        right: 8px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 10px;
        line-height: 1em;
        padding: 5px 5px;
      }
    }
  }
}
</style>
<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'

import { updateSchedule } from '../store/actions'

import timeWxs from '../wxs/time.wxs'
import imageWxs from '../wxs/image.wxs'

@connect(
  {
    schedule(state) {
      return state.schedule
    }
  },
  { updateSchedule }
)
export default class Schedule extends wepy.page {
  config = {
    navigationBarTitleText: '日程'
  }

  wxs = {
    timeWxs,
    imageWxs
  }

  data = {
    mode: '',
    list: []
  }

  watch = {
    schedule() {
      this.loadSchedule()
    }
  }

  computed = {
    logoImageSrc() {
      switch (this.mode) {
        case 'regular':
          return '../assets/img/battle-regular.png'
        case 'gachi':
          return '../assets/img/battle-ranked.png'
        case 'league':
          return '../assets/img/battle-league.png'
        default:
          return ''
      }
    },
    titleText() {
      switch (this.mode) {
        case 'regular':
          return 'Regular Battle'
        case 'gachi':
          return 'Ranked Battle'
        case 'league':
          return 'League Battle'
        default:
          return 'Loading'
      }
    }
  }

  methods = {
    backToIndex() {
      wx.switchTab({
        url: '/pages/index'
      })
    }
  }

  loadSchedule() {
    this.list = this.schedule[this.mode].list
    this.$apply()
  }

  onLoad(options) {
    const mode = options.mode
    if (mode) {
      this.mode = mode
    }
    this.methods.updateSchedule()
    this.loadSchedule()
  }

  onShareAppMessage() {}
}
</script>
