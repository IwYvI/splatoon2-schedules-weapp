<template>
  <view class="container setting-container">
    <view class="setting-header">
      <image class="setting-header-background" src="../assets/img/bg-mask-ink-splat.svg"></image>
      <view class="setting-header-content">
        <image class="setting-logo" src="../assets/img/logo.jpg"></image>
        <text class="splatoon2">乌贼日历</text>
      </view>
    </view>
    <view class="setting-content">
      <view class="setting-item dot-background">
        <navigator url="splatfest">祭典</navigator>
      </view>
      <view class="setting-item dot-background">
        <text>语言设置</text>
        <picker
          range-key="value"
          @change="changeLocale"
          value="{{localeIndex}}"
          range="{{localeList}}"
        >
          <view class="picker">{{localeList[localeIndex].value}}</view>
        </picker>
      </view>
      <view class="setting-item dot-background">
        <navigator url="about">关于</navigator>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'

import { updateLocale, updateLocaleData } from '../store/actions'

@connect(
  {
    locale(state) {
      return state.locale
    }
  },
  { updateLocale, updateLocaleData }
)
export default class Setting extends wepy.page {
  config = {
    navigationBarTitleText: '设置'
  }

  data = {
    localeIndex: 'en',
    localeList: [
      {
        id: 'en',
        value: '英语'
      },
      {
        id: 'ja',
        value: '日语'
      },
      {
        id: 'fr',
        value: '法语'
      },
      {
        id: 'es',
        value: '西班牙语'
      },
      {
        id: 'de',
        value: '德语'
      },
      {
        id: 'it',
        value: '意大利语'
      },
      {
        id: 'nl',
        value: '荷兰语'
      },
      {
        id: 'ru',
        value: '俄语'
      }
    ]
  }

  watch = {
    locale() {
      this.setLocale()
    }
  }

  methods = {
    changeLocale({ detail }) {
      const localeAction = this.methods.updateLocale(this.localeList[detail.value].id)
      if (localeAction.payload) {
        this.methods.updateLocaleData(localeAction.payload)
      }
    }
  }

  setLocale() {
    const index = this.localeList.findIndex((v) => {
      return this.locale.locale === v.id
    })
    this.localeIndex = index === -1 ? 'en' : index
    this.$apply()
  }

  onLoad() {
    this.setLocale()
  }
}
</script>
<style lang="less">
.setting-header {
  display: flex;
  flex-direction: column;
  height: 400rpx;
  width: 100%;
  justify-content: center;
  align-items: center;
  position: relative;
  margin-top: 40rpx;
  margin-bottom: 40rpx;
  .setting-header-background {
    width: 500rpx;
    height: 400rpx;
    position: absolute;
    z-index: -1;
    top: 0;
  }
  .setting-header-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    .setting-logo {
      margin: 10rpx 0 20rpx;
      width: 120rpx;
      height: 120rpx;
      border-radius: 50%;
      box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.2);
    }
    text {
      line-height: 1em;
      color: #ffffff;
    }
  }
}
.setting-content {
  width: 90%;
}
.setting-item {
  margin-bottom: 30rpx;
  box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.2);
  padding: 20rpx;
  border-radius: 30rpx;
  position: relative;
  transform: rotate(0.2deg);
  background-color: #808080;
  color: #ffffff;
  display: flex;
  justify-content: space-between;
  navigator {
    width: 100%;
  }
}
</style>
