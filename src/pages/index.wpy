<style lang="less">
.index-wrap {
  margin-bottom: 40rpx;
}
.index-schedule-card {
  transform: rotate(0.5deg);
  &:nth-child(even) {
    transform: rotate(-0.5deg);
  }
}
.index-splatfest-card {
  width: 90%;
  background-color: #aaaaaa;
  transform: rotate(-0.8deg);
  &:before {
    background-color: #aaaaaa;
  }
}
.index-schedule-hint {
  color: #888888;
  font-size: 24rpx;
  text-align: center;
  line-height: 1.4em;
  margin-top: 30rpx;
}
.index-region-picker {
  display: flex;
  justify-content: center;
}
.index-salmonrun-banner {
  width: 100%;
  text-align: center;
  color: #ffffff;
  font-size: 32rpx;
  box-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.2);
  navigator {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding-top: 10rpx;
    padding-bottom: 10rpx;
    image {
      width: 50rpx;
      height: 50rpx;
      margin-right: 10rpx;
    }
    text {
      line-height: 1em;
    }
  }
}
</style>
<template>
  <view>
    <view wx:if="{{isLatestSalmonrunOpen}}" class="index-salmonrun-banner circle-background">
      <navigator url="salmonrun" open-type="switchTab">
        <image src="../assets/img/salmon-run.png"></image>
        <text class="splatoon">海産招募中...</text>
      </navigator>
    </view>
    <loader wx:if="{{!isSplatfestLoaded}}" :timeout.sync="timeout"></loader>
    <view wx:else class="index-wrap">
      <view wx:if="{{isLatestSplatfestStart && !isLatestSplatfestEnd}}" class="container index-container">
        <splatfest-schedule-card class="index-schedule-card" mode="splatfest" :list.sync="regularList" :splatfest.sync="latestSplatfest" />
      </view>
      <view wx:else class="container index-container">
        <regular-card class="index-schedule-card" mode="regular" :list.sync="regularList" />
        <gachi-card class="index-schedule-card" mode="gachi" :list.sync="gachiList" />
        <league-card class="index-schedule-card" mode="league" :list.sync="leagueList" />
      </view>
      <view wx:if="{{!isLatestSplatfestEnd}}">
        <navigator url="splatfest" class="container index-container">
          <splatfest-card class="index-splatfest-card" :detail.sync="latestSplatfest"></splatfest-card>
        </navigator>
        <view class="index-schedule-hint">
          <view class="index-region-picker">
            <text>当前祭典区域：</text>
            <region-picker readonly="true"></region-picker>
          </view>
          <view>可以在「更多」-「祭典」中修改</view>
        </view>
      </view>
    </view>
    <timer @timer-update.user="timerUpdate" @timer-timeout.user="timerTimeout"></timer>
  </view>
</template>

<script>
import wepy from 'wepy'
import { connect } from 'wepy-redux'

import {
  updateSchedule,
  updateSalmonrun,
  updateSplatfest
} from '../store/actions'

import scheduleCard from '@/components/schedule-card'
import timer from '@/components/timer'
import loader from '@/components/loader'
import splatfestCard from '@/components/splatfest-card'
import regionPicker from '@/components/region-picker'

import LocaleMixin from '@/mixins/LocaleMixin'

@connect(
  {
    schedule(state) {
      return state.schedule
    },
    salmonrun(state) {
      return state.salmonrun
    },
    splatfest(state) {
      return state.splatfest
    },
    region(state) {
      return state.region
    },
    locale(state) {
      return state.locale
    }
  },
  { updateSchedule, updateSalmonrun, updateSplatfest }
)
export default class Index extends wepy.page {
  config = {
    navigationBarTitleText: '乌贼日历',
    enablePullDownRefresh: true
  }

  components = {
    'regular-card': scheduleCard,
    'gachi-card': scheduleCard,
    'league-card': scheduleCard,
    'splatfest-schedule-card': scheduleCard,
    'splatfest-card': splatfestCard,
    'region-picker': regionPicker,
    timer,
    loader
  }

  mixins = [LocaleMixin]

  data = {
    regularList: [],
    gachiList: [],
    leagueList: [],
    isLatestSalmonrunOpen: false,
    isSplatfestLoaded: false,
    latestSplatfest: {},
    isLatestSplatfestEnd: true, // 最近的祭典是否已经结束
    isLatestSplatfestStart: false, // 最近的祭典是否开始
    timeout: false
  }

  watch = {
    schedule() {
      this.loadSchedule()
    },
    salmonrun() {
      this.loadSalmonrun()
    },
    splatfest() {
      this.loadSplatfest()
    },
    locale() {
      this.setLocaleData(this.locale)
    }
  }

  computed = {}

  methods = {
    timerUpdate() {
      this.startUpdate()
    },
    timerTimeout() {
      this.timeout = true
      this.$apply()
    }
  }

  loadSchedule() {
    this.regularList = this.schedule.regular.list
    this.gachiList = this.schedule.gachi.list
    this.leagueList = this.schedule.league.list
    this.$apply()
    wx.stopPullDownRefresh()
  }

  loadSalmonrun() {
    const latest = this.salmonrun.salmonrun.list[0]
    if (latest && Number(`${latest.start_time}000` < Date.now())) {
      this.isLatestSalmonrunOpen = true
    } else {
      this.isLatestSalmonrunOpen = false
    }
    this.$apply()
  }

  loadSplatfest() {
    this.latestSplatfest = this.splatfest.splatfest.list[0]
    if (this.latestSplatfest) {
      const now = Date.now()
      if (Number(`${this.latestSplatfest.times.end}000` > now)) {
        this.isLatestSplatfestEnd = false
      } else {
        this.isLatestSplatfestEnd = true
      }
      if (Number(`${this.latestSplatfest.times.start}000` < now)) {
        this.isLatestSplatfestStart = true
      } else {
        this.isLatestSplatfestStart = false
      }
    }
    if (this.splatfest.updatedAt) {
      this.isSplatfestLoaded = true // 确保祭奠成功加载
    }
    this.$apply()
    this.updateLogo()
  }

  updateLogo() {
    if (this.latestSplatfest) {
      const alpha = this.latestSplatfest.colors.alpha.css_rgb
      const bravo = this.latestSplatfest.colors.bravo.css_rgb
      this.$broadcast('update-logo', {
        alpha,
        bravo
      })
    }
  }

  startUpdate() {
    this.methods.updateSchedule()
    this.methods.updateSalmonrun()
    this.methods.updateSplatfest()
  }

  onLoad() {
    this.startUpdate()
    this.setLocaleData(this.locale)
  }

  onShow() {
    this.$broadcast('start-timer')
  }

  onHide() {
    this.$broadcast('stop-timer')
  }

  onShareAppMessage() {}

  onPullDownRefresh() {
    this.startUpdate()
  }
}
</script>
